/**
 * Script pour g√©n√©rer les ressources n√©cessaires √† la page Landing Page Express
 * Optimise les images et cr√©e les fichiers de m√©tadonn√©es
 */

const fs = require('fs').promises;
const path = require('path');
const sharp = require('sharp');

// Constantes pour les chemins
const PUBLIC_DIR = path.join(__dirname, '../public');
const LANDING_PAGE_DIR = path.join(PUBLIC_DIR, 'images/landing-page-express');
const METADATA_FILE = path.join(LANDING_PAGE_DIR, 'metadata.json');

// Configuration des images √† g√©n√©rer
const IMAGES_TO_GENERATE = [
  {
    name: 'hero-image.webp',
    width: 1200,
    height: 600,
    background: { r: 41, g: 65, b: 171, alpha: 1 },
    text: 'Landing Page Express',
    description: 'Image d\'en-t√™te pour la page Landing Page Express'
  },
  {
    name: 'restaurant-avant.webp',
    width: 800,
    height: 600,
    background: { r: 220, g: 220, b: 220, alpha: 1 },
    text: 'Restaurant - Avant',
    description: 'Site web basique du restaurant Le Bistrot Parisien avant transformation'
  },
  {
    name: 'restaurant-apres.webp',
    width: 800,
    height: 600,
    background: { r: 41, g: 65, b: 171, alpha: 0.8 },
    text: 'Restaurant - Apr√®s',
    description: 'Landing page moderne du restaurant Le Bistrot Parisien apr√®s transformation'
  },
  {
    name: 'menuiserie-avant.webp',
    width: 800,
    height: 600,
    background: { r: 220, g: 220, b: 220, alpha: 1 },
    text: 'Menuiserie - Avant',
    description: 'Simple carte de visite en ligne de la Menuiserie Dubois avant transformation'
  },
  {
    name: 'menuiserie-apres.webp',
    width: 800,
    height: 600,
    background: { r: 139, g: 69, b: 19, alpha: 0.8 },
    text: 'Menuiserie - Apr√®s',
    description: 'Landing page professionnelle de la Menuiserie Dubois apr√®s transformation'
  },
  {
    name: 'og-image.jpg',
    width: 1200,
    height: 630,
    background: { r: 41, g: 65, b: 171, alpha: 1 },
    text: 'Landing Page Express - BTOV',
    description: 'Image pour les r√©seaux sociaux de l\'offre Landing Page Express'
  }
];

// Tailles pour les images responsives
const RESPONSIVE_SIZES = [
  { width: 800, height: 600, suffix: 'large' },
  { width: 400, height: 300, suffix: 'medium' },
  { width: 200, height: 150, suffix: 'small' }
];

/**
 * Cr√©e un r√©pertoire s'il n'existe pas
 * @param {string} dir Chemin du r√©pertoire √† cr√©er
 */
async function ensureDirectoryExists(dir) {
  try {
    await fs.mkdir(dir, { recursive: true });
    console.log(`‚úì R√©pertoire cr√©√© ou existant: ${dir}`);
  } catch (error) {
    console.error(`√ó Erreur lors de la cr√©ation du r√©pertoire ${dir}:`, error);
    throw error;
  }
}

/**
 * G√©n√®re une image avec du texte
 * @param {Object} config Configuration de l'image
 * @returns {Promise<Buffer>} Buffer de l'image g√©n√©r√©e
 */
async function generateImageWithText(config) {
  const { width, height, background, text } = config;
  
  // Cr√©er une image de base avec la couleur de fond
  const baseImage = sharp({
    create: {
      width,
      height,
      channels: 4,
      background
    }
  });
  
  // Cr√©er une image avec le texte
  const textSvg = Buffer.from(`
    <svg width="${width}" height="${height}">
      <style>
        .title { fill: white; font-size: 48px; font-weight: bold; font-family: sans-serif; }
      </style>
      <text x="50%" y="50%" text-anchor="middle" class="title">${text}</text>
    </svg>
  `);
  
  // Combiner les deux images
  return baseImage
    .composite([{ input: textSvg, gravity: 'center' }])
    .toBuffer();
}

/**
 * G√©n√®re une version LQIP (Low Quality Image Placeholder)
 * @param {Buffer} imageBuffer Buffer de l'image source
 * @returns {Promise<Buffer>} Buffer de l'image LQIP
 */
async function generateLQIP(imageBuffer) {
  return sharp(imageBuffer)
    .resize(20, 20, { fit: 'inside' })
    .blur(10)
    .webp({ quality: 20, effort: 3 })
    .toBuffer();
}

/**
 * G√©n√®re les diff√©rentes tailles d'une image
 * @param {Buffer} imageBuffer Buffer de l'image source
 * @param {string} baseName Nom de base de l'image
 * @returns {Promise<Array>} Tableau des m√©tadonn√©es des images g√©n√©r√©es
 */
async function generateResponsiveImages(imageBuffer, baseName) {
  const results = [];
  
  for (const size of RESPONSIVE_SIZES) {
    const outputFilename = `${baseName.replace(/\.\w+$/, '')}-${size.suffix}.webp`;
    const outputPath = path.join(LANDING_PAGE_DIR, outputFilename);
    
    await sharp(imageBuffer)
      .resize(size.width, size.height, {
        fit: 'cover',
        position: 'center'
      })
      .webp({
        quality: 80,
        effort: 6
      })
      .toFile(outputPath);
    
    results.push({
      path: `/images/landing-page-express/${outputFilename}`,
      width: size.width,
      height: size.height,
      suffix: size.suffix
    });
    
    console.log(`‚úì Image responsive cr√©√©e: ${outputFilename}`);
  }
  
  return results;
}

/**
 * G√©n√®re toutes les images et leurs m√©tadonn√©es
 */
async function generateAllImages() {
  const metadata = [];
  
  // Assurer que les r√©pertoires existent
  await ensureDirectoryExists(LANDING_PAGE_DIR);
  await ensureDirectoryExists(path.join(LANDING_PAGE_DIR, 'lqip'));
  
  for (const imageConfig of IMAGES_TO_GENERATE) {
    try {
      console.log(`üîÑ G√©n√©ration de l'image: ${imageConfig.name}`);
      
      // G√©n√©rer l'image principale
      const imageBuffer = await generateImageWithText(imageConfig);
      const outputPath = path.join(LANDING_PAGE_DIR, imageConfig.name);
      
      await sharp(imageBuffer)
        .toFile(outputPath);
      
      // G√©n√©rer la version LQIP
      const lqipBuffer = await generateLQIP(imageBuffer);
      const lqipPath = path.join(LANDING_PAGE_DIR, 'lqip', imageConfig.name);
      await sharp(lqipBuffer).toFile(lqipPath);
      
      // G√©n√©rer les versions responsives
      const responsiveImages = await generateResponsiveImages(imageBuffer, imageConfig.name);
      
      // Ajouter les m√©tadonn√©es
      metadata.push({
        path: `/images/landing-page-express/${imageConfig.name}`,
        description: imageConfig.description,
        dimensions: {
          width: imageConfig.width,
          height: imageConfig.height
        },
        lqip: `/images/landing-page-express/lqip/${imageConfig.name}`,
        responsiveImages
      });
      
      console.log(`‚úì Image g√©n√©r√©e: ${imageConfig.name}`);
    } catch (error) {
      console.error(`√ó Erreur lors de la g√©n√©ration de l'image ${imageConfig.name}:`, error);
    }
  }
  
  // Enregistrer les m√©tadonn√©es
  await fs.writeFile(METADATA_FILE, JSON.stringify(metadata, null, 2));
  console.log(`‚úì M√©tadonn√©es enregistr√©es dans: ${METADATA_FILE}`);
}

// Ex√©cuter le script
console.log('üöÄ D√©but de la g√©n√©ration des ressources pour Landing Page Express');
generateAllImages()
  .then(() => {
    console.log('‚ú® G√©n√©ration des ressources termin√©e avec succ√®s');
  })
  .catch(error => {
    console.error('‚ùå Erreur lors de la g√©n√©ration des ressources:', error);
    process.exit(1);
  });
